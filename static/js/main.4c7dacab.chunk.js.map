{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChangeForm","event","target","value","preventDefault","id","uuidv4","className","s","form","label","type","onChange","pattern","title","required","input","btn","ContactList","contacts","onRemove","length","list","map","contact","listItem","onClick","ContactListItem","Filter","INITIAL_CONTACTS","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","newContact","find","handleUniqueContact","alert","prev","e","normalizedFilter","toLowerCase","includes","getVisibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c7dacab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__vTBSk\",\"label\":\"ContactForm_label__3zMB6\",\"input\":\"ContactForm_input__21CYb\",\"btn\":\"ContactForm_btn__111y4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__24ZaY\",\"number\":\"ContactList_number__2Psjd\",\"btn\":\"ContactList_btn__3cE-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2ZVrD\",\"input\":\"Filter_input__1dDzs\"};","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport s from \"./ContactForm.module.css\";\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChangeForm = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const handleSubmitForm = (event) => {\n    event.preventDefault();\n\n    onSubmit({ id: uuidv4(), name, number });\n\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChangeForm}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          className={s.input}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChangeForm}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр, может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          className={s.input}\n        />\n      </label>\n      <button className={s.btn}>Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nimport s from \"./ContactList.module.css\";\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li key={id} className={s.listItem}>\n      <span className={s.name}>{name}: </span>\n      <span className={s.number}>{number}</span>\n      <button onClick={() => onRemove(id)} className={s.btn}>\n        Deleted\n      </button>\n    </li>\n  );\n};\n\nconst ContactList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={s.list}>\n      {contacts.map((contact) => ContactListItem({ ...contact, onRemove }))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from \"prop-types\";\n\nimport s from \"./Filter.module.css\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n        className={s.input}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nconst INITIAL_CONTACTS = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    () =>\n      JSON.parse(window.localStorage.getItem(\"contacts\")) ?? INITIAL_CONTACTS\n  );\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  function handleAddContact(newContact) {\n    const uniqueContact = handleUniqueContact(newContact);\n    if (!uniqueContact) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n    setContacts((prev) => [newContact, ...prev]);\n  }\n\n  const handleChangeFilter = (e) => {\n    const { value } = e.target;\n    setFilter(value);\n  };\n\n  function handleUniqueContact(newContact) {\n    const isExistContact = !!contacts.find(\n      (contact) => contact.name === newContact.name\n    );\n    return !isExistContact;\n  }\n\n  function getVisibleContacts() {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n\n  function handleRemoveContact(id) {\n    setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  }\n\n  return (\n    <div className=\"contaiter\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleAddContact} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={handleChangeFilter} />\n      <ContactList\n        contacts={getVisibleContacts()}\n        onRemove={handleRemoveContact}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}